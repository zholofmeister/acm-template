#include <bits/stdc++.h>

#define mt make_tuple
#define fi first
#define se second
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define forn(i, n) for (int i = 0; i < (int)(n); ++i)
#define for1(i, n) for (int i = 1; i <= (int)(n); ++i)
#define ford(i, a, b) for (int i = (int)(a); i >= (int)b; --i)
#define fore(i, a, b) for (int i = (int)(a); i <= (int)(b); ++i)
#define rep(i, l, r) for (int i = (l); i <= (r); i++)
#define per(i, r, l) for (int i = (r); i >= (l); i--)
#define ms(x, y) memset(x, y, sizeof(x))

using namespace std;

typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<pii> vpi;
typedef vector<vi> vvi;
typedef long long i64;
typedef vector<i64> vi64;
typedef vector<vi64> vvi64;
typedef pair<i64, i64> pi64;
typedef double ld;

template<class T> bool uin(T &a, T b) { return a > b ? (a = b, true) : false; }
template<class T> bool uax(T &a, T b) { return a < b ? (a = b, true) : false; }

const int maxn = 110000 + 1000;
char ma[maxn << 1], s[maxn];
int mp[maxn << 1];

int manacher(char s[], int len) {
	int l = 0, ans = 1;
	ma[l++] = '$';
	ma[l++] = '#';
	for (int i = 0; i < len; ++i) {
		ma[l++] = s[i];
		ma[l++] = '#';
	}
	ma[l] = 0;
	int mx = 0, id = 0;
	for (int i = 0; i < l; ++i) {
		mp[i] = mx > i ? min(mp[2 * id - i], mx - i) : 1;
		while (ma[i - mp[i]] == ma[i + mp[i]]) ++mp[i];
		if (i + mp[i] > mx) {
			mx = i + mp[i];
			id = i;
		}
		if (mp[i] - 1 > ans) ans = mp[i] - 1;
	}
	return ans;
}

int main() {
	ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.precision(10);
    cout << fixed;
#ifdef LOCAL_DEFINE
    freopen("in", "r", stdin);
#endif

	while (cin >> s) {
		int len = strlen(s);
		int ans = manacher(s, len);
		cout << ans << '\n';
	}

#ifdef LOCAL_DEFINE
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC << " s.\n";
#endif
	return 0;
}

设pos为找到最长回文串的中心位置，则回文串在原来串中的位置为（0~n-1）：x ~ y
x = (pos  - (mp[pos] - 1) + 1) / 2 - 1;
y = (pos + (mp[pos] - 1) - 1) / 2 - 1;
